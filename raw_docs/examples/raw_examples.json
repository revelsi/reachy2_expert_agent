[
  {
    "type": "example",
    "name": "draw_square.py",
    "path": "draw_square.py",
    "content": "\"\"\"Example of how to draw a square with Reachy's right arm.\"\"\"\n\nimport logging\nimport time\n\nimport numpy as np\nimport numpy.typing as npt\n\nfrom reachy2_sdk import ReachySDK\n\n\ndef build_pose_matrix(x: float, y: float, z: float) -> npt.NDArray[np.float64]:\n    \"\"\"Build a 4x4 pose matrix for a given position in 3D space, with the effector at a fixed orientation.\n\n    Args:\n        x: The x-coordinate of the position.\n        y: The y-coordinate of the position.\n        z: The z-coordinate of the position.\n\n    Returns:\n        A 4x4 NumPy array representing the pose matrix.\n    \"\"\"\n    # The effector is always at the same orientation in the world frame\n    return np.array(\n        [\n            [0, 0, -1, x],\n            [0, 1, 0, y],\n            [1, 0, 0, z],\n            [0, 0, 0, 1],\n        ]\n    )\n\n\ndef draw_square(reachy: ReachySDK) -> None:\n    \"\"\"Draw a square path with Reachy's right arm in 3D space.\n\n    This function commands Reachy's right arm to move in a square pattern\n    using four predefined positions (A, B, C, and D) in the world frame.\n    The square is drawn by moving the arm sequentially through these positions:\n    - A: (0.4, -0.5, -0.2)\n    - B: (0.4, -0.5, 0)\n    - C: (0.4, -0.3, 0)\n    - D: (0.4, -0.3, -0.2)\n\n    see https://pollen-robotics.github.io/reachy2-docs/developing-with-reachy-2/basics/4-use-arm-kinematics/\n    for Reachy's coordinate system\n\n    Each movement uses inverse kinematics to calculate the required joint\n    positions to achieve the target pose and then sends the commands to\n    Reachy's arm to execute the movements.\n\n    Args:\n        reachy: An instance of the ReachySDK used to control the robot.\n    \"\"\"\n    # Going from A to B\n    target_pose = build_pose_matrix(0.4, -0.5, 0)\n    ik = reachy.r_arm.inverse_kinematics(target_pose)\n    reachy.r_arm.goto(ik, duration=2.0, degrees=True)\n\n    current_pos = reachy.r_arm.forward_kinematics()\n    print(\"Pose B: \", current_pos)\n\n    # Going from B to C\n    target_pose = build_pose_matrix(0.4, -0.3, 0)\n    ik = reachy.r_arm.inverse_kinematics(target_pose)\n    reachy.r_arm.goto(ik, duration=2.0, degrees=True)\n\n    current_pos = reachy.r_arm.forward_kinematics()\n    print(\"Pose C: \", current_pos)\n\n    # Going from C to D\n    target_pose = build_pose_matrix(0.4, -0.3, -0.2)\n    ik = reachy.r_arm.inverse_kinematics(target_pose)\n    reachy.r_arm.goto(ik, duration=2.0, degrees=True)\n\n    current_pos = reachy.r_arm.forward_kinematics()\n    print(\"Pose D: \", current_pos)\n\n    # Going from D to A\n    target_pose = build_pose_matrix(0.4, -0.5, -0.2)\n    ik = reachy.r_arm.inverse_kinematics(target_pose)\n    reachy.r_arm.goto(ik, duration=2.0, degrees=True, wait=True)\n\n    current_pos = reachy.r_arm.forward_kinematics()\n    print(\"Pose A: \", current_pos)\n\n\ndef goto_to_point_A(reachy: ReachySDK) -> None:\n    \"\"\"Move Reachy's right arm to Point A in 3D space.\n\n    This function commands Reachy's right arm to move to a specified target position\n    (Point A) in the world frame, which is located at (0.4, -0.5, -0.2).\n\n    Args:\n        reachy: An instance of the ReachySDK used to control the robot.\n    \"\"\"\n    # position of point A in space\n    target_pose = build_pose_matrix(0.4, -0.5, -0.2)\n    # get the position in the joint space\n    joints_positions = reachy.r_arm.inverse_kinematics(target_pose)\n    # move Reachy's right arm to this point\n    reachy.r_arm.goto(joints_positions, duration=2, wait=True)\n\n\nif __name__ == \"__main__\":\n    print(\"Reachy SDK example: draw square\")\n\n    logging.basicConfig(level=logging.INFO)\n    reachy = ReachySDK(host=\"localhost\")\n\n    if not reachy.is_connected:\n        exit(\"Reachy is not connected.\")\n\n    print(\"Turning on Reachy\")\n    reachy.turn_on()\n\n    time.sleep(0.2)\n\n    print(\"Set to Elbow 90 pose ...\")\n    goto_ids = reachy.goto_posture(\"elbow_90\", wait=True)\n    # wait_for_pose_to_finish(goto_ids)\n\n    print(\"Move to point A\")\n    goto_to_point_A(reachy)\n\n    print(\"Draw a square with the right arm ...\")\n    draw_square(reachy)\n\n    print(\"Set to Zero pose ...\")\n    goto_ids = reachy.goto_posture(\"default\", wait=True)\n    # wait_for_pose_to_finish(goto_ids)\n\n    time.sleep(0.2)\n\n    exit(\"Exiting example\")\n"
  },
  {
    "type": "example",
    "name": "cameras.py",
    "path": "cameras.py",
    "content": "\"\"\"Example script to display live frames from the teleoperation and depth cameras.\"\"\"\n\nimport argparse\nimport logging\n\nimport cv2\n\nfrom reachy2_sdk import ReachySDK\nfrom reachy2_sdk.media.camera import CameraView\n\n\ndef display_teleop_cam() -> None:\n    \"\"\"Display live frames from the teleoperation camera.\n\n    This function retrieves and displays frames from the left and right\n    views of the teleoperation camera. The function terminates\n    upon a keyboard interrupt.\n\n    Raises:\n        SystemExit: If the teleop camera is not available.\n    \"\"\"\n    if reachy.cameras.teleop is None:\n        exit(\"There is no teleop camera.\")\n\n    print(f\"Left camera parameters {reachy.cameras.teleop.get_parameters(CameraView.LEFT)}\")\n    print(f\"Left camera extrinsic parameters {reachy.cameras.teleop.get_extrinsics(CameraView.LEFT)}\")\n    # print(reachy.cameras.teleop.get_parameters(CameraView.RIGHT))\n\n    try:\n        while True:\n            frame, ts = reachy.cameras.teleop.get_frame(CameraView.LEFT)\n            frame_r, ts_r = reachy.cameras.teleop.get_frame(CameraView.RIGHT)\n            print(f\"timestamps secs: left {ts} - right {ts_r}\")\n            cv2.imshow(\"left\", frame)\n            cv2.imshow(\"right\", frame_r)\n            cv2.waitKey(1)\n\n    except KeyboardInterrupt:\n        logging.info(\"User Interrupt\")\n\n\ndef display_depth_cam() -> None:\n    \"\"\"Display live frames from the depth camera.\n\n    This function retrieves and displays RGB and depth frames from the depth camera.\n    It normalizes the depth map for visualization and shows the RGB frame and normalized depth\n    frame side by side. The function exits upon a keyboard interrupt.\n\n    Raises:\n        SystemExit: If the depth camera is not available.\n    \"\"\"\n    if reachy.cameras.depth is None:\n        exit(\"There is no depth camera.\")\n\n    print(f\"Depth camera parameters {reachy.cameras.depth.get_parameters()}\")\n    print(f\"Depth camera extrinsic parameters {reachy.cameras.depth.get_extrinsics()}\")\n\n    try:\n        while True:\n            rgb, ts = reachy.cameras.depth.get_frame()\n            depth, ts_r = reachy.cameras.depth.get_depth_frame()\n            depth_map_normalized = cv2.normalize(depth, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U)  # type: ignore [attr-defined]\n            cv2.imshow(\"frame\", rgb)\n            cv2.imshow(\"depthn\", depth_map_normalized)\n            cv2.waitKey(1)\n\n    except KeyboardInterrupt:\n        logging.info(\"User Interrupt\")\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO)\n\n    argParser = argparse.ArgumentParser(description=\"SDK camera example\")\n    argParser.add_argument(\n        \"mode\",\n        type=str,\n        choices=[\"teleop\", \"depth\"],\n    )\n    args = argParser.parse_args()\n\n    reachy = ReachySDK(host=\"localhost\")\n\n    if not reachy.is_connected:\n        exit(\"Reachy is not connected.\")\n\n    if reachy.cameras is None:\n        exit(\"There is no connected camera.\")\n\n    if args.mode == \"teleop\":\n        display_teleop_cam()\n    elif args.mode == \"depth\":\n        display_depth_cam()\n"
  },
  {
    "type": "example",
    "name": "set_default_posture.py",
    "path": "set_default_posture.py",
    "content": "\"\"\"Example of setting Reachy to zero pose using Reachy SDK.\"\"\"\n\nimport logging\nimport time\n\nfrom reachy2_sdk import ReachySDK\n\nif __name__ == \"__main__\":\n    print(\"Reachy SDK example: set to default posture\")\n\n    # display messages from SDK\n    logging.basicConfig(level=logging.INFO)\n\n    # connect to Reachy\n    reachy = ReachySDK(host=\"localhost\")\n\n    # check if connection is successful\n    if not reachy.is_connected:\n        exit(\"Reachy is not connected.\")\n\n    print(\"Reachy basic information:\")\n    print(reachy.info)\n    print(\"Reachy joint status:\")\n    print(reachy.r_arm.joints)\n\n    print(\"Turning on Reachy...\")\n    reachy.turn_on()\n\n    time.sleep(0.2)\n\n    print(\"Set to default posture...\")\n    reachy.goto_posture(\"default\")\n\n    time.sleep(1)\n\n    exit(\"Exiting example\")\n"
  }
]